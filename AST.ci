// AST.ci - Ci abstract syntax tree
//
// Copyright (C) 2011-2022  Piotr Fusik
//
// This file is part of CiTo, see https://github.com/pfusik/cito
//
// CiTo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiTo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiTo.  If not, see http://www.gnu.org/licenses/

public enum CiVisibility
{
	Private,
	Internal,
	Protected,
	Public,
	NumericElementType,
	FinalValueType
}

public enum CiCallType
{
	Static,
	Normal,
	Abstract,
	Virtual,
	Override,
	Sealed
}

public enum CiPriority
{
	Statement,
	Argument,
	Assign,
	Select,
	CondOr,
	CondAnd,
	Or,
	Xor,
	And,
	Equality,
	Rel,
	Shift,
	Add,
	Mul,
	Primary
}

public enum CiId
{
	None,
	StringClass,
	ArrayPtrClass,
	ArrayStorageClass,
	ListClass,
	QueueClass,
	StackClass,
	HashSetClass,
	DictionaryClass,
	SortedDictionaryClass,
	OrderedDictionaryClass,
	RegexClass,
	MatchClass,
	LockClass,
	StringLength,
	ArrayLength,
	ConsoleError,
	MatchStart,
	MatchEnd,
	MatchLength,
	MatchValue,
	MathNaN,
	MathNegativeInfinity,
	MathPositiveInfinity,
	StringContains,
	StringEndsWith,
	StringIndexOf,
	StringLastIndexOf,
	StringStartsWith,
	StringSubstring,
	ArrayBinarySearchAll,
	ArrayBinarySearchPart,
	ArrayCopyTo,
	ArrayFillAll,
	ArrayFillPart,
	ArraySortAll,
	ArraySortPart,
	ListAdd,
	ListAny,
	ListClear,
	ListContains,
	ListCopyTo,
	ListCount,
	ListInsert,
	ListRemoveAt,
	ListRemoveRange,
	ListSortAll,
	ListSortPart,
	QueueClear,
	QueueCount,
	QueueDequeue,
	QueueEnqueue,
	QueuePeek,
	StackClear,
	StackCount,
	StackPeek,
	StackPush,
	StackPop,
	HashSetAdd,
	HashSetClear,
	HashSetContains,
	HashSetCount,
	HashSetRemove,
	DictionaryAdd,
	DictionaryClear,
	DictionaryContainsKey,
	DictionaryCount,
	DictionaryRemove,
	SortedDictionaryClear,
	SortedDictionaryContainsKey,
	SortedDictionaryCount,
	SortedDictionaryRemove,
	OrderedDictionaryClear,
	OrderedDictionaryContainsKey,
	OrderedDictionaryCount,
	OrderedDictionaryRemove,
	ConsoleWrite,
	ConsoleWriteLine,
	UTF8GetByteCount,
	UTF8GetBytes,
	UTF8GetString,
	EnvironmentGetEnvironmentVariable,
	RegexCompile,
	RegexEscape,
	RegexIsMatchStr,
	RegexIsMatchRegex,
	MatchFindStr,
	MatchFindRegex,
	MatchGetCapture,
	MathMethod,
	MathCeiling,
	MathFusedMultiplyAdd,
	MathIsFinite,
	MathIsInfinity,
	MathIsNaN,
	MathLog2,
	MathTruncate
}

abstract class CiDocInline
{
	internal string() Text;
}

class CiDocText : CiDocInline
{
}

class CiDocCode : CiDocInline
{
}

public abstract class CiDocBlock
{
}

public class CiDocPara : CiDocBlock
{
	internal List<CiDocInline#>() Children;
}

public class CiDocList : CiDocBlock
{
	internal List<CiDocPara()>() Items;
}

public class CiCodeDoc
{
	internal CiDocPara() Summary;
	internal List<CiDocBlock#>() Details;
}

public abstract class CiVisitor
{
	public abstract void VisitAggregateInitializer(CiAggregateInitializer expr);
	public abstract void VisitVar(CiVar expr);
	public abstract void VisitLiteralLong(long value);
	public abstract void VisitLiteralChar(int value);
	public abstract void VisitLiteralDouble(double value);
	public abstract void VisitLiteralString(string value);
	public abstract void VisitLiteralNull();
	public abstract void VisitLiteralFalse();
	public abstract void VisitLiteralTrue();
	public abstract CiExpr VisitInterpolatedString(CiInterpolatedString expr, CiPriority parent);
	public abstract CiExpr VisitSymbolReference(CiSymbolReference expr, CiPriority parent);
	public abstract CiExpr VisitPrefixExpr(CiPrefixExpr expr, CiPriority parent);
	public abstract CiExpr VisitPostfixExpr(CiPostfixExpr expr, CiPriority parent);
	public abstract CiExpr VisitBinaryExpr(CiBinaryExpr expr, CiPriority parent);
	public abstract CiExpr VisitSelectExpr(CiSelectExpr expr, CiPriority parent);
	public abstract CiExpr VisitCallExpr(CiCallExpr expr, CiPriority parent);
	public abstract void VisitLambdaExpr(CiLambdaExpr expr);
	public abstract void VisitConst(CiConst statement);
	public abstract void VisitExpr(CiExpr statement);
	public abstract void VisitBlock(CiBlock statement);
	public abstract void VisitAssert(CiAssert statement);
	public abstract void VisitBreak(CiBreak statement);
	public abstract void VisitContinue(CiContinue statement);
	public abstract void VisitDoWhile(CiDoWhile statement);
	public abstract void VisitFor(CiFor statement);
	public abstract void VisitForeach(CiForeach statement);
	public abstract void VisitIf(CiIf statement);
	public abstract void VisitLock(CiLock statement);
	public abstract void VisitNative(CiNative statement);
	public abstract void VisitReturn(CiReturn statement);
	public abstract void VisitSwitch(CiSwitch statement);
	public abstract void VisitThrow(CiThrow statement);
	public abstract void VisitWhile(CiWhile statement);
	public abstract void VisitEnumValue(CiConst konst, CiConst previous);
}

public abstract class CiStatement
{
	internal int Line;
	public abstract bool CompletesNormally();
	public abstract void AcceptStatement(CiVisitor! visitor);
}

public abstract class CiExpr : CiStatement
{
	internal CiType# Type;
	public override bool CompletesNormally() => true;
	public virtual bool IsIndexing() => false;
	public virtual bool IsLiteralZero() => false;
	public virtual bool IsConstEnum() => false;
	public virtual int IntValue() { assert false; }
	public virtual CiExpr Accept(CiVisitor visitor, CiPriority parent) { assert false; }
	public override void AcceptStatement(CiVisitor visitor) { visitor.VisitExpr(this); }
	public virtual bool IsReferenceTo(CiSymbol symbol) => false;
}

public abstract class CiSymbol : CiExpr
{
	internal CiId Id = CiId.None;
	internal string() Name;
	internal CiSymbol Next;
	internal CiScope Parent;
	internal CiCodeDoc# Documentation = null;
	public override string() ToString() => this.Name;
}

public abstract class CiScope : CiSymbol
{
	Dictionary<string, CiSymbol#>() Dict;
	internal CiSymbol First = null;
	CiSymbol! Last;

	public int Count() => this.Dict.Count;

	public CiVar FirstParameter()
	{
		assert this.First is CiVar result;
		return result;
	}

	public CiContainerType GetContainer()
	{
		for (CiScope scope = this; scope != null; scope = scope.Parent) {
			if (scope is CiContainerType container)
				return container;
		}
		assert false;
	}

	public bool Contains(CiSymbol symbol) => this.Dict.ContainsKey(symbol.Name);

	public CiSymbol TryShallowLookup(string name) => this.Dict.ContainsKey(name) ? this.Dict[name] : null;

	public virtual CiSymbol TryLookup(string name)
	{
		for (CiScope scope = this; scope != null; scope = scope.Parent) {
			if (scope.Dict.ContainsKey(name))
				return scope.Dict[name];
		}
		return null;
	}

	public void Add!(CiSymbol# symbol)
	{
		this.Dict[symbol.Name] = symbol;
		symbol.Next = null;
		symbol.Parent = this;
		if (this.First == null)
			this.First = symbol;
		else
			this.Last.Next = symbol;
		this.Last = symbol;
	}

	public bool Encloses(CiSymbol symbol)
	{
		for (CiScope scope = symbol.Parent; scope != null; scope = scope.Parent) {
			if (scope == this)
				return true;
		}
		return false;
	}
}

public class CiAggregateInitializer : CiExpr
{
	internal List<CiExpr#>() Items;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitAggregateInitializer(this);
		return this;
	}
}

public abstract class CiLiteral : CiExpr
{
	public abstract bool IsDefaultValue();
	public virtual string GetLiteralString() { assert false; }
}

public class CiLiteralFalse : CiLiteral
{
	public override bool IsDefaultValue() => true;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitLiteralFalse();
		return this;
	}
	public override string() ToString() => "false";
}

public class CiLiteralTrue : CiLiteral
{
	public override bool IsDefaultValue() => false;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitLiteralTrue();
		return this;
	}
	public override string() ToString() => "true";
}

public class CiLiteralNull : CiLiteral
{
	public override bool IsDefaultValue() => true;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitLiteralNull();
		return this;
	}
	public override string() ToString() => "null";
}

public class CiLiteralLong : CiLiteral
{
	internal long Value;
	public override bool IsLiteralZero() => this.Value == 0;
	public override int IntValue() => this.Value;
	public override bool IsDefaultValue() => this.Value == 0;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitLiteralLong(this.Value);
		return this;
	}
	public override string() GetLiteralString() => $"{this.Value}";
	public override string() ToString() => $"{this.Value}";
}

public class CiLiteralString : CiLiteral
{
	internal string() Value;
	public override bool IsDefaultValue() => false;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitLiteralString(this.Value);
		return this;
	}
	public override string() GetLiteralString() => this.Value;
	public override string() ToString() => '"' + this.Value + '"';
	public int GetAsciiLength()
	{
		int length = 0;
		bool escaped = false;
		foreach (int c in this.Value) {
			if (c > 127)
				return -1;
			if (!escaped && c == '\\')
				escaped = true;
			else {
				length++;
				escaped = false;
			}
		}
		return length;
	}
	public int GetAsciiAt(int i)
	{
		bool escaped = false;
		foreach (int c in this.Value) {
			if (c > 127)
				return -1;
			if (!escaped && c == '\\')
				escaped = true;
			else if (i == 0)
				return escaped ? CiLexer.GetEscapedChar(c) : c;
			else {
				i--;
				escaped = false;
			}
		}
		return -1;
	}
	public int GetOneAscii()
	{
		switch (this.Value.Length) {
		case 1:
			int c = this.Value[0];
			return c > 127 ? -1 : c;
		case 2:
			return this.Value[0] != '\\' ? -1 : CiLexer.GetEscapedChar(this.Value[1]);
		default:
			return -1;
		}
	}
}

public class CiImplicitEnumValue : CiExpr
{
	internal int Value;
	public override int IntValue() => this.Value;
}

public class CiSymbolReference : CiExpr
{
	internal CiExpr# Left;
	internal string Name;
	internal CiSymbol Symbol;
	public override bool IsConstEnum() => this.Symbol.Parent is CiEnum;
	public override int IntValue()
	{
		assert this.Symbol is CiConst konst;
		return konst.Value.IntValue();
	}
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent) => visitor.VisitSymbolReference(this, parent);
	public override bool IsReferenceTo(CiSymbol symbol) => this.Symbol == symbol;
	//public override string() ToString() => this.Left != null ? $"{this.Left}.{this.Name}" : this.Name;
}

public abstract class CiUnaryExpr : CiExpr
{
	internal CiToken Op;
	internal CiExpr# Inner;
}

public class CiPrefixExpr : CiUnaryExpr
{
	public override bool IsConstEnum() => this.Type is CiEnumFlags && this.Inner.IsConstEnum(); // && this.Op == CiToken.Tilde
	public override int IntValue()
	{
		assert this.Op == CiToken.Tilde;
		return ~this.Inner.IntValue();
	}
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent) => visitor.VisitPrefixExpr(this, parent);
}

public class CiPostfixExpr : CiUnaryExpr
{
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent) => visitor.VisitPostfixExpr(this, parent);
}

public class CiSelectExpr : CiExpr
{
	internal CiExpr# Cond;
	internal CiExpr# OnTrue;
	internal CiExpr# OnFalse;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent) => visitor.VisitSelectExpr(this, parent);
	//public override string() ToString() => $"({this.Cond} ? {this.OnTrue} : {this.OnFalse})";
}

public class CiCallExpr : CiExpr
{
	internal CiSymbolReference# Method;
	internal List<CiExpr#>() Arguments;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent) => visitor.VisitCallExpr(this, parent);
}

public class CiLambdaExpr : CiScope
{
	internal CiExpr# Body;
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitLambdaExpr(this);
		return this;
	}
}

public abstract class CiCondCompletionStatement : CiScope
{
	bool CompletesNormallyValue;
	public override bool CompletesNormally() => this.CompletesNormallyValue;
	public void SetCompletesNormally(bool value) { this.CompletesNormallyValue = value; }
}

public class CiBlock : CiCondCompletionStatement
{
	internal List<CiStatement#>() Statements;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitBlock(this); }
}

public class CiAssert : CiStatement
{
	internal CiExpr# Cond;
	internal CiExpr# Message = null;
	public override bool CompletesNormally() => !(this.Cond is CiLiteralFalse);
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitAssert(this); }
}

public abstract class CiLoop : CiCondCompletionStatement
{
	internal CiExpr# Cond;
	internal CiStatement# Body;
	internal bool HasBreak = false;
}

public class CiBreak : CiStatement
{
	internal CiCondCompletionStatement LoopOrSwitch;
	public override bool CompletesNormally() => false;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitBreak(this); }
}

public class CiContinue : CiStatement
{
	internal CiLoop Loop;
	public override bool CompletesNormally() => false;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitContinue(this); }
}

public class CiDoWhile : CiLoop
{
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitDoWhile(this); }
}

public class CiFor : CiLoop
{
	internal CiExpr# Init;
	internal CiExpr# Advance;
	internal bool IsRange = false;
	internal bool IsIteratorUsed;
	internal long RangeStep;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitFor(this); }
}

public class CiForeach : CiLoop
{
	internal CiExpr Collection;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitForeach(this); }
	public CiVar GetVar() => this.FirstParameter();
	public CiVar GetValueVar() => this.FirstParameter().NextParameter();
}

public class CiIf : CiCondCompletionStatement
{
	internal CiExpr# Cond;
	internal CiStatement# OnTrue;
	internal CiStatement# OnFalse;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitIf(this); }
}

public class CiLock : CiStatement
{
	internal CiExpr# Lock;
	internal CiStatement# Body;
	public override bool CompletesNormally() => this.Body.CompletesNormally();
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitLock(this); }
}

public class CiNative : CiStatement
{
	internal string() Content;
	public override bool CompletesNormally() => true;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitNative(this); }
}

public class CiReturn : CiStatement
{
	internal CiExpr# Value;
	public override bool CompletesNormally() => false;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitReturn(this); }
}

public class CiCase
{
	internal List<CiExpr#>() Values;
	internal List<CiStatement#>() Body;
}

public class CiSwitch : CiCondCompletionStatement
{
	internal CiExpr# Value;
	internal List<CiCase()>() Cases;
	internal List<CiStatement#>() DefaultBody;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitSwitch(this); }

	public static int LengthWithoutTrailingBreak(List<CiStatement#> body)
	{
		int length = body.Count;
		if (length > 0 && body[length - 1] is CiBreak)
			length--;
		return length;
	}

	public bool HasDefault() => LengthWithoutTrailingBreak(this.DefaultBody) > 0;

	static bool HasBreak(CiStatement statement)
	{
		switch (statement) {
		case CiBreak _:
			return true;
		case CiIf ifStatement:
			return HasBreak(ifStatement.OnTrue) || (ifStatement.OnFalse != null && HasBreak(ifStatement.OnFalse));
		case CiBlock block:
			return block.Statements.Any(statement => HasBreak(statement));
		default:
			return false;
		}
	}

	public static bool HasEarlyBreak(List<CiStatement> body)
	{
		int length = LengthWithoutTrailingBreak(body);
		for (int i = 0; i < length; i++) {
			if (HasBreak(body[i]))
				return true;
		}
		return false;
	}

	static bool ListHasContinue(List<CiStatement> statements) => statements.Any(statement => HasContinue(statement));

	static bool HasContinue(CiStatement statement)
	{
		switch (statement) {
		case CiContinue _:
			return true;
		case CiIf ifStatement:
			return HasContinue(ifStatement.OnTrue) || (ifStatement.OnFalse != null && HasContinue(ifStatement.OnFalse));
		case CiSwitch switchStatement:
			return switchStatement.Cases.Any(kase => ListHasContinue(kase.Body)) || ListHasContinue(switchStatement.DefaultBody);
		case CiBlock block:
			return ListHasContinue(block.Statements);
		default:
			return false;
		}
	}

	public static bool HasEarlyBreakAndContinue(List<CiStatement> body) => HasEarlyBreak(body) && ListHasContinue(body);
}

public class CiThrow : CiStatement
{
	internal CiExpr# Message;
	public override bool CompletesNormally() => false;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitThrow(this); }
}

public class CiWhile : CiLoop
{
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitWhile(this); }
}

public class CiParameters : CiScope
{
}

public class CiType : CiScope
{
	public virtual string() GetArraySuffix() => "";
	public virtual bool IsAssignableFrom(CiType right) => this == right;
	public virtual bool EqualsType(CiType right) => this == right;
	public virtual bool IsArray() => false;
	public virtual bool IsFinal() => false;
	public virtual bool IsNullable() => false;
	public virtual CiType GetBaseType() => this;
	public virtual CiType GetStorageType() => this;
	public virtual CiType GetPtrOrSelf() => this;
}

public abstract class CiNumericType : CiType
{
}

public class CiFloatingType : CiNumericType
{
	public override bool IsAssignableFrom(CiType right) => right is CiNumericType;
}

public abstract class CiNamedValue : CiSymbol
{
	internal CiExpr# TypeExpr;
	internal CiExpr# Value;
	public bool IsAssignableStorage() => this.Type is CiStorageType && !(this.Type is CiArrayStorageType) && this.Value is CiLiteralNull;
}

public class CiMember : CiNamedValue
{
	internal CiVisibility Visibility;
	protected CiMember()
	{
	}
	public static CiMember# New(CiType# type, CiId id, string name)
		=> new CiMember { Visibility = CiVisibility.Public, Type = type, Id = id, Name = name };
	public virtual bool IsStatic() { assert false; }
}

public class CiVar : CiNamedValue
{
	internal bool IsAssigned = false;
	public static CiVar# New(CiType# type, string name, CiExpr# defaultValue = null)
		=> new CiVar { Type = type, Name = name, Value = defaultValue };
	public override CiExpr Accept(CiVisitor! visitor, CiPriority parent)
	{
		visitor.VisitVar(this);
		return this;
	}
	public CiVar NextParameter()
	{
		assert this.Next is CiVar def;
		return def;
	}
}

public enum CiVisitStatus
{
	NotYet,
	InProgress,
	Done
}

public class CiConst : CiMember
{
	internal CiMethodBase InMethod;
	internal CiVisitStatus VisitStatus;
	public override void AcceptStatement(CiVisitor! visitor) { visitor.VisitConst(this); }
	public override bool IsStatic() => true;
}

public class CiField : CiMember
{
	public override bool IsStatic() => false;
}

public class CiMethodBase : CiMember
{
	internal bool Throws;
	internal CiStatement# Body;
	internal bool IsLive = false;
	internal HashSet<CiMethod>() Calls;
}

//public class CiMethodGroup : CiMember
//{
//	internal CiMethod#[2] Methods;
//	CiMethodGroup()
//	{
//	}
//	public static CiMethodGroup# New(CiMethod# method0, CiMethod# method1)
//	{
//		CiMethodGroup# result = new CiMethodGroup { Visibility = method0.Visibility, Name = method0.Name };
//		result.Methods[0] = method0;
//		result.Methods[1] = method1;
//		return result;
//	}
//}

public abstract class CiContainerType : CiType
{
	internal bool IsPublic;
	internal string Filename;
}

public class CiEnum : CiContainerType
{
	internal bool HasExplicitValue = false;
	public void AcceptValues(CiVisitor visitor)
	{
		CiConst previous = null;
		for (CiSymbol symbol = this.First; symbol != null; symbol = symbol.Next) {
			assert symbol is CiConst konst;
			visitor.VisitEnumValue(konst, previous);
			previous = konst;
		}
	}
}

public class CiEnumFlags : CiEnum
{
}
