// AST.ci - Ci abstract syntax tree
//
// Copyright (C) 2011-2022  Piotr Fusik
//
// This file is part of CiTo, see https://github.com/pfusik/cito
//
// CiTo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiTo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiTo.  If not, see http://www.gnu.org/licenses/

public enum CiVisibility
{
	Private,
	Internal,
	Protected,
	Public,
	NumericElementType,
	FinalValueType
}

public enum CiCallType
{
	Static,
	Normal,
	Abstract,
	Virtual,
	Override,
	Sealed
}

public enum CiPriority
{
	Statement,
	Argument,
	Assign,
	Select,
	CondOr,
	CondAnd,
	Or,
	Xor,
	And,
	Equality,
	Rel,
	Shift,
	Add,
	Mul,
	Primary
}

public enum CiId
{
	None,
	ArrayPtrClass,
	ArrayStorageClass,
	ListClass,
	QueueClass,
	StackClass,
	HashSetClass,
	DictionaryClass,
	SortedDictionaryClass,
	OrderedDictionaryClass,
	RegexClass,
	MatchClass,
	LockClass,
	StringLength,
	ArrayLength,
	ConsoleError,
	MatchStart,
	MatchEnd,
	MatchLength,
	MatchValue,
	MathNaN,
	MathNegativeInfinity,
	MathPositiveInfinity,
	StringContains,
	StringEndsWith,
	StringIndexOf,
	StringLastIndexOf,
	StringStartsWith,
	StringSubstring,
	ArrayBinarySearchAll,
	ArrayBinarySearchPart,
	ArrayCopyTo,
	ArrayFillAll,
	ArrayFillPart,
	ArraySortAll,
	ArraySortPart,
	ListAdd,
	ListAny,
	ListClear,
	ListContains,
	ListCopyTo,
	ListCount,
	ListInsert,
	ListRemoveAt,
	ListRemoveRange,
	ListSortAll,
	ListSortPart,
	QueueClear,
	QueueCount,
	QueueDequeue,
	QueueEnqueue,
	QueuePeek,
	StackClear,
	StackCount,
	StackPeek,
	StackPush,
	StackPop,
	HashSetAdd,
	HashSetClear,
	HashSetContains,
	HashSetCount,
	HashSetRemove,
	DictionaryAdd,
	DictionaryClear,
	DictionaryContainsKey,
	DictionaryCount,
	DictionaryRemove,
	SortedDictionaryClear,
	SortedDictionaryContainsKey,
	SortedDictionaryCount,
	SortedDictionaryRemove,
	OrderedDictionaryClear,
	OrderedDictionaryContainsKey,
	OrderedDictionaryCount,
	OrderedDictionaryRemove,
	ConsoleWrite,
	ConsoleWriteLine,
	UTF8GetByteCount,
	UTF8GetBytes,
	UTF8GetString,
	EnvironmentGetEnvironmentVariable,
	RegexCompile,
	RegexEscape,
	RegexIsMatchStr,
	RegexIsMatchRegex,
	MatchFindStr,
	MatchFindRegex,
	MatchGetCapture,
	MathMethod,
	MathCeiling,
	MathFusedMultiplyAdd,
	MathIsFinite,
	MathIsInfinity,
	MathIsNaN,
	MathLog2,
	MathTruncate
}

abstract class CiDocInline
{
	internal string() Text;
}

class CiDocText : CiDocInline
{
}

class CiDocCode : CiDocInline
{
}

public abstract class CiDocBlock
{
}

public class CiDocPara : CiDocBlock
{
	internal List<CiDocInline#>() Children;
}

public class CiDocList : CiDocBlock
{
	internal List<CiDocPara()>() Items;
}

public class CiCodeDoc
{
	internal CiDocPara() Summary;
	internal List<CiDocBlock#>() Details;
}

public abstract class CiStatement
{
	internal int Line;
	public abstract bool CompletesNormally();
	public abstract void AcceptStatement(CiVisitor! visitor);
}

//public abstract class CiSymbol : CiExpr
//{
//	internal CiId Id = CiId.None;
//	internal string() Name;
//	internal CiSymbol Next;
//	internal CiScope Parent;
//	internal CiCodeDoc# Documentation = null;
//	//public override string ToString() => this.Name;
//}

public abstract class CiUnaryExpr : CiExpr
{
	internal CiToken Op;
	internal CiExpr# Inner;
}

public abstract class CiCondCompletionStatement : CiScope
{
	bool CompletesNormallyValue;
	public override bool CompletesNormally() => this.CompletesNormallyValue;
	public void SetCompletesNormally(bool value) { this.CompletesNormallyValue = value; }
}

public abstract class CiLoop : CiCondCompletionStatement
{
	internal CiExpr# Cond;
	internal CiStatement# Body;
	internal bool HasBreak = false;
}

public class CiCase
{
	internal List<CiExpr#>() Values;
	internal List<CiStatement#>() Body;
}

public class CiParameters : CiScope
{
}

public class CiType : CiScope
{
	public virtual string() GetArraySuffix() => "";
	public virtual bool IsAssignableFrom(CiType right) => this == right;
	public virtual bool EqualsType(CiType right) => this == right;
	public virtual bool IsArray() => false;
	public virtual bool IsFinal() => false;
	public virtual bool IsNullable() => false;
	public virtual CiType GetBaseType() => this;
	public virtual CiType GetStorageType() => this;
	public virtual CiType GetPtrOrSelf() => this;
}

public abstract class CiNumericType : CiType
{
}

//public class CiFloatingType : CiNumericType
//{
//	public override bool IsAssignableFrom(CiType right) => right is CiNumericType;
//}

public abstract class CiContainerType : CiType
{
	internal bool IsPublic;
	internal string Filename;
}

public enum CiVisitStatus
{
	NotYet,
	InProgress,
	Done
}
